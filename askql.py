# -*- coding: utf-8 -*-
"""askql.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gm7_7-1wSPOjCgxklRRiuIFeZ3aXt0Hn
"""

!pip install langchain langchain-google-vertexai langchain-experimental chromadb sentence-transformers pymysql python-dotenv

# --- Imports ---
from langchain_google_vertexai import GemmaVertexAIModelGarden
from langchain.utilities import SQLDatabase
from langchain_experimental.sql import SQLDatabaseChain
from langchain.prompts import FewShotPromptTemplate, PromptTemplate
from langchain.prompts.example_selector import SemanticSimilarityExampleSelector
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import Chroma
from langchain.chains.sql_database.prompt import PROMPT_SUFFIX
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def get_few_shots():
    return [
        {
            "Question": "How many items are left for a given brand in a given size and color?",
            "SQLQuery": "SELECT SUM(stock_quantity) FROM t_shirts WHERE brand = 'Nike' AND color = 'White' AND size = 'XS'",
            "SQLResult": "Result of SQL query",
            "Answer": "The number of XS White Nike t-shirts available is <result>"
        },
        {
            "Question": "What is the total value of all items of a given size?",
            "SQLQuery": "SELECT SUM(price * stock_quantity) FROM t_shirts WHERE size = 'S'",
            "SQLResult": "Result of SQL query",
            "Answer": "The total inventory value for size S items is <result>"
        },
        {
            "Question": "If all items from a given brand are sold with discounts applied, what is the revenue?",
            "SQLQuery": """
                SELECT SUM(a.total_amount * ((100 - COALESCE(discounts.pct_discount, 0))/100)) AS total_revenue
                FROM (
                    SELECT SUM(price * stock_quantity) AS total_amount, t_shirt_id
                    FROM t_shirts WHERE brand = 'Levi'
                    GROUP BY t_shirt_id
                ) a
                LEFT JOIN discounts ON a.t_shirt_id = discounts.t_shirt_id
            """,
            "SQLResult": "Result of SQL query",
            "Answer": "The discounted revenue from selling all Levi items is <result>"
        }
    ]

def create_db_chain(db_url):
    # Initialize database connection
    db = SQLDatabase.from_uri(
        db_url,
        sample_rows_in_table_info=3
    )

    # Setup embeddings and example selector
    embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
    few_shots = get_few_shots()
    to_vectorize = [" ".join(ex.values()) for ex in few_shots]
    
    vectorstore = Chroma.from_texts(to_vectorize, embeddings, metadatas=few_shots)
    example_selector = SemanticSimilarityExampleSelector(
        vectorstore=vectorstore,
        k=2
    )

    # Setup prompts
    mysql_prompt = """
    You are a SQL expert. Given an input question, first create a syntactically correct SQL query to run,
    then look at the results of the query and return the answer.

    - Never use SELECT *
    - Only use available column names
    - Wrap column names in backticks
    - Use CURDATE() when referring to "today"

    Use this format:
    Question: <User question>
    SQLQuery: <SQL>
    SQLResult: <Result of SQL>
    Answer: <Final answer>
    """

    example_prompt = PromptTemplate(
        input_variables=["Question", "SQLQuery", "SQLResult", "Answer"],
        template="\nQuestion: {Question}\nSQLQuery: {SQLQuery}\nSQLResult: {SQLResult}\nAnswer: {Answer}"
    )

    few_shot_prompt = FewShotPromptTemplate(
        example_selector=example_selector,
        example_prompt=example_prompt,
        prefix=mysql_prompt,
        suffix=PROMPT_SUFFIX,
        input_variables=["input", "table_info", "top_k"],
    )

    # Initialize Gemini model
    llm_chat = ChatVertexAI(model="gemini-1.5-flash-preview-0514")

    # Create and return the database chain
    return SQLDatabaseChain.from_llm(llm_chat, db, verbose=True, prompt=few_shot_prompt)

def query_database(question, db_url):
    """
    Main function to query the database
    """
    try:
        chain = create_db_chain(db_url)
        result = chain(question)
        return result["result"]
    except Exception as e:
        return f"Error: {str(e)}"